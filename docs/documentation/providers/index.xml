<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Choosing an I/O Provider on Pi4J</title>
    <link>https://pi4j.com/documentation/providers/</link>
    <description>Recent content in Choosing an I/O Provider on Pi4J</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language><atom:link href="https://pi4j.com/documentation/providers/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>LinuxFS</title>
      <link>https://pi4j.com/documentation/providers/linuxfs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pi4j.com/documentation/providers/linuxfs/</guid>
      <description>The current implementation of the LinuxFS plugin implements a file based I2C provider. The file based provider opens /dev/i2c-1 using a RandomAccessFile to perform I2C reads and writes.
To use the LinuxFS provider first add the proper dependency:
&amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;com.pi4j&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;pi4j-plugin-linuxfs&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${pi4j.version}&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; And then one can get access to the provider as follows:
Context pi4j = Pi4J.newAutoContext(); I2CProvider i2CProvider = pi4j.provider(&amp;#34;linuxfs-i2c&amp;#34;); I2CConfig i2cConfig = I2C.newConfigBuilder(pi4j).id(&amp;#34;TCA9534&amp;#34;).bus(1).device(0x3f).build(); try (I2C tca9534Dev = i2CProvider.</description>
    </item>
    
    <item>
      <title>PiGpio</title>
      <link>https://pi4j.com/documentation/providers/pigpio/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pi4j.com/documentation/providers/pigpio/</guid>
      <description>TODO</description>
    </item>
    
  </channel>
</rss>
