<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Pi4J 入门 on Pi4J</title>
    <link>https://pi4j.com/getting-started/</link>
    <description>Recent content in Pi4J 入门 on Pi4J</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language><atom:link href="https://pi4j.com/getting-started/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>设置一个新的树莓派</title>
      <link>https://pi4j.com/getting-started/set-up-a-new-raspberry-pi/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pi4j.com/getting-started/set-up-a-new-raspberry-pi/</guid>
      <description>介绍 Raspberry Pi 是一款功能强大的机器，有很多的使用示例。这很大程度上是基于您使用的操作系统，对于我们的“入门”示例，使用的是“官方 RaspberryPi OS”（以前称为“Raspbian OS”）。还有其他很多可玩性，例如在 GitHub 上的“Awesome Raspberry Pi”列表.
在本文中，我们从全新的 Raspberry Pi 开发板开始。
一步步来 第一步：当然是从盒子里将新的树莓派取出来 :-)
仔细看看，你手里拿着的才是真正的杰作。技术工程的奇迹，完美结合了强大而廉价的组件。
但要注意！这也是一些敏感的电子产品。首先触摸电源插座的接地引脚始，以确保您的身体没有静电，如果有静电可能会损坏板子。
TODO 添加图片。
材料清单  Raspberry Pi 内存卡，最低 16 GB 电脑（或者其他的树莓派） 带有 SD 卡插槽的 PC（或其他树莓派）（也许您需要一个 SD 卡适配器） 电源（5V，2A 或者 3A） 显示器、键盘、鼠标  SD card SD 卡将保存操作系统。在 Raspberry Pi 官网上，下载页面，找到 Imager 工具。选择适合您电脑的版本，下载并安装。
启动 Imager 工具并按照以下步骤操作：
 点击“操作系统”&amp;gt;“选择操作系统” 选择“树莓派操作系统（其他）” 选择“Raspberry Pi OS Full (32-bit)”                                           通过选择“完整”版本，我们将拥有一个预装了大量附加工具的操作系统，包括“OpenJDK 11”，因此将能够快速开始 Java 开发。</description>
    </item>
    
    <item>
      <title>了解 GPIO 引脚</title>
      <link>https://pi4j.com/getting-started/understanding-the-pins/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pi4j.com/getting-started/understanding-the-pins/</guid>
      <description>将电子元件连接到 Pi 是通过连接接头中的一个或多个引脚完成的。引脚的数量随着 Raspberry Pi 板版本增长而“增长”，现在最新版本固定在 40 个引脚。需要注意的是引脚的编号，以免以错误的方式连接到组件。
引脚类型 引脚有不同的用途
电源和地 5V 和 3.3V 均可用作电源引脚，接地引脚也是电源引脚。当电路板通电以后，外围组件都可以使用引脚提供的电源。但是不能连接电流大的设备，否则 Raspberry Pi 将没法正常运行，并且会将系统重启。
数字输入输出接口 除了电源引脚，其他的都是“通用输入/输出”（GPIO）引脚。这些引脚可以通过软件寻址以用作应用程序的输入或输出。它们使用 3.3V，这意味着输出引脚将设置为 0V（低电平）或 3.3V（高电平），输入引脚将读取 0V 为低电平，3.3V 为高电平。
大多数 GPIO 引脚都有一个内部上拉或下拉电阻，可以通过软件启用。
概述 下图概述了典型 40 引脚接头的引脚和类型。注意使用的不同数字
 PIN：引脚的 1 到 40 个逻辑顺序 BCM：Java 代码中用于指定要使用的 GPIO 的数字。 BCM指的是“Broadcom SOC通道”编号，是树莓派上使用的芯片内部编号。这些数字在不同的树莓派版本之间是不同的，例如在早期的板子上 26 号针脚作用不同，或者是顺序不同。 WPI：Pi4J 的 V.1 使用的 WiringPi 编号。 WiringPi 编号有“历史原因”。在进行第一个 Raspberry Pi 的开发时，预计只有 8 个引脚编号。随着后来的设计进一步发展，WiringPi 扩展了更多的引脚。  </description>
    </item>
    
    <item>
      <title>使用 VSC 进行 Java 开发</title>
      <link>https://pi4j.com/getting-started/java-development-on-the-raspberry-pi-with-vsc/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pi4j.com/getting-started/java-development-on-the-raspberry-pi-with-vsc/</guid>
      <description>在树莓派上使用 Java Pi4J V2 需要在 Java 11 或更新版本下运行。幸运的是，在 2019-06-20 发布的树莓派系统中，已经包含了 OpenJDK Java 11，可以在发行说明中看到：
2019-06-20: Based on Debian Buster Oracle Java 7 and 8 replaced with OpenJDK 11 但是需要注意的是这个版本仅与 ARMv7 或更高版本兼容并且不支持所有 Raspberry Pi 开发板。如果您有 Raspberry Pi A（版本 3）、B（版本 2 或更高版本）或 Compute（版本 3 或更高版本），那么您就可以开始使用了！对于其他开发板，可以在需要在 &amp;ldquo;Java for ARMv6/7/8&amp;rdquo; 中找到响应的帮助。
如果您准备了一张带有最新版本 Raspberry Pi 系统（完整版）的 microSD 卡，安装步骤在 &amp;ldquo;设置新的 Raspberry Pi&amp;rdquo;，启动树莓派，可以在终端查看安装的 Java 版本。在带有 ARMv7 或 ARMv8 的板上，您将得到以下结果：
$ java -version openjdk version &amp;quot;11.0.3&amp;quot; 2019-04-16 OpenJDK Runtime Environment (build 11.</description>
    </item>
    
    <item>
      <title>在远程 PC 上进行开发</title>
      <link>https://pi4j.com/getting-started/developing-on-a-remote-pc/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pi4j.com/getting-started/developing-on-a-remote-pc/</guid>
      <description>GITHUB 项目地址： https://github.com/Pi4J/pi4j-maven-archetype
 使用远程 PC 工作站开发 Java 程序 直接在 Raspberry Pi 板上编写您的 Java 程序，编译并运行它，像前一章说的那样，完全没问题。我们还可以使用普通台式计算机作为远程开发工作站（RDW）。
这个 Maven Archetype会给你一个工具来生成Pi4J-V2骨架Java项目。你可以将它用于你的下一个 Pi4j 项目，你可以在远程工作站 (RDW) 上开发你的程序，编译它们，在目标 Pi 板上传输可执行代码并运行它。同样还可以启动远程调试。
使用这样的开发模式，会有一些优点和缺点：
 优点：  与 Raspberry Pi 相比，您的 RDW 拥有更强的能力，例如内存、磁盘容量和 CPU 功率，这对于 P4 型号也是如此。您可以将所有程序存储在台式计算机中。 您不必在 Raspberry Pi 上安装 Visual Studio Code（或者其他的 IDE 程序）、不用安装 Java JDK（JRE 就足够了）、以及 Maven 和其他开发工具。而且不需要将屏幕、键盘和鼠标连接到 Raspberry Pi 可以使用小的 PI 型号   缺点：  你不能运行 Web 项目（使用 web 容器，例如 Tomcat 或者 similar）    设置 为树莓派配置无界面模式 无界面模式可以使树莓派通过 SSH 协议连接 RDW（远程工作站）</description>
    </item>
    
    <item>
      <title>最小示例程序</title>
      <link>https://pi4j.com/getting-started/minimal-example-application/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pi4j.com/getting-started/minimal-example-application/</guid>
      <description>GITHUB 项目地址： https://github.com/Pi4J/pi4j-example-minimal
 &amp;ldquo;pi4j-example-minimal&amp;rdquo; GitHub 项目 包含使用 Pi4J 控制数字输入和输出的示例小程序。本章会详细解释这个项目。这个程序会打开/关闭 LED，每次按下按钮时，闪烁频率会加大。按下第 5 次的时候，应用程序将停止。
  接线 这个示例程序接线如下图所示：
构建程序 Pi4J 项目使用到的最主要的构建工具就是 Maven，但是在这个示例中我们提供了 Maven 和 Gradle 两种构建方式，你可以根据你的情况进行选择性使用。
Maven 这个示例程序可以使用 Apache Maven 3.6（或者更高版本）Java 11 OpenJDK（或者更高版本）如前几页所述。必须在构建此项目之前安装这些工具。可以使用以下命令下载所有项目依赖并编译Java模块。您可以使用 Java 11+ 直接在 Raspberry Pi 上构建此项目。
mvn clean package Gradle 您还可以使用 Gradle 6.6（或更高版本）和 Java 11 OpenJDK（或更高版本）。 Gradle 包装器的使用方法参考 docs.gradle.org。 Gradle 配置文件参考 build.gradle-file
Linux 系统:
./gradlew build Windows 系统:
gradlew.bat build pom.xml 依赖 对 Maven 项目来说，pom.xml 中定义了项目的所有依赖，以及构建流程。 在本项目中，我们使用了 slf4 来打印日志， pi4j-core 和 pi4j-plugins 来控制树莓派 GPIO 为了方便版本升级，我们添加了版本的配置文件。</description>
    </item>
    
    <item>
      <title>User interface with JavaFX</title>
      <link>https://pi4j.com/getting-started/user-interface-with-javafx/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pi4j.com/getting-started/user-interface-with-javafx/</guid>
      <description>GITHUB PROJECT: https://github.com/Pi4J/pi4j-example-javafx
 JavaFX is a framework to create user interfaces for desktop (Windows, Mac, Linux) and mobile phones. JavaFX is an opensource project which is documented on openjfx.io and the sources are available in this GitHub project.
The main goal of Java has always been to be able to create applications which are &amp;ldquo;write once, run everywhere&amp;rdquo;. JavaFX promises the same for Graphical User Interface applications.
Gluon is the main maintainer of the OpenJFX project and offers commercial support to companies who want to use JavaFX in critical applications.</description>
    </item>
    
    <item>
      <title>Learn more...</title>
      <link>https://pi4j.com/getting-started/learn-more/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pi4j.com/getting-started/learn-more/</guid>
      <description>Pi4J is used in a lot of projects, and you can find a lot of examples online. On this page we want to keep an up-to-date list. Do you want to add something? Please hit &amp;ldquo;Edit this page&amp;rdquo; on the top and create a pull request!
Twitter Please share your personal or professional projects where you combine Java and the Raspberry Pi on Twitter with the hashtag #JavaOnRaspberryPi.
Online articles  Foojay.</description>
    </item>
    
  </channel>
</rss>
